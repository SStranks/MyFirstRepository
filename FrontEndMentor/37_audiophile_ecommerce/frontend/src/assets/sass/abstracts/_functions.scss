/* -------------------------------- */
/*   Functions                      */
/* -------------------------------- */
/*   ~~[PROJECT NAME]~~             */
/*   # [PROJECT DETAILS]            */
/* -------------------------------- */
/*   version:   1.0                 */
/*   date:      xx/xx/xxxx          */
/*   author:    Simon Stranks       */
/*   website:   github.com/SStranks */
/* -------------------------------- */

/*   Imports                        */
@use 'sass:math';
@use 'sass:meta';

/* -------------------------------- */
/*   Functions                      */
/* -------------------------------- */

// Convert pixel value to REM. Returns 0 if input is 0, err if unit included
@function px2rem($pixel) {
  @if math.is-unitless($pixel) {
    $rem-value: math.div($pixel, 16) + 0rem;
    $zero-safe-rem: if($pixel == 0, 0, $rem-value);
    @return $zero-safe-rem;
  } @else {
    @error 'Don\'t use units when using the rem() function';
  }
}

// Convert pixel value to EM. Returns 0 if input is 0, err if unit included
@function px2em($pixel) {
  @if math.is-unitless($pixel) {
    $em-value: math.div($pixel, 16) + 0em;
    $zero-safe-em: if($pixel == 0, 0, $em-value);
    @return $zero-safe-em;
  } @else {
    @error 'Don\'t use units when using the em() function';
  }
}

// Convert pixel value to EM, taking parent REM into consideration.
// Returns 0 if input is 0, err if unit included
@function px2emParent($pixel, $REM) {
  $val1: strip-unit($pixel);
  $val2: strip-unit($REM);
  $em-value: math.div($val1, ($val2 * 16)) + 0em;
  $zero-safe-em: if($val1 == 0, 0, $em-value);
  @return $zero-safe-em;
}

// Removes the unit of a number
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

/* -------------------------------- */
/*   Z_Index Manager                */
/* -------------------------------- */

// Order determined by '$z-indexes' list
// Organise $z-indexes and call function with relevant element name.
@function z($name, $z-indexes-list: $z-indexes) {
  @if index($z-indexes-list, $name) {
    @return (length($z-indexes-list) - index($z-indexes-list, $name)) + 1;
  } @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes-list}';

    @return null;
  }
}

// Z-Index List. Descending order of Z height; 0, 1, 2..
$z-indexes: ('fallback', 'skip-to', 'nav', 'modal', 'menuCart', 'menuModal');
